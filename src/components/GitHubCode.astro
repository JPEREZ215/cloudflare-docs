---
import { z } from "astro:schema";
import { Code } from "@astrojs/starlight/components";

type Props = z.infer<typeof props>;

const props = z
	.object({
		repo: z.string(),
		commit: z.string(),
		file: z.string(),
		lang: z.string(),
		lines: z
			.string()
			.transform((val) => val.split("-").map(Number))
			.optional(),
		tag: z.string().optional(),
	})
	.refine(
		(val) => {
			return !(val.lines && val.tag);
		},
		{ message: "Lines and tag are mutually exclusive filters." },
	);

const { repo, commit, file, lang, lines, tag } = props.parse(Astro.props);

const res = await fetch(
	`https://gh-code.developers.cloudflare.com/${repo}/${commit}/${file}`,
);

if (!res.ok) {
	throw new Error(`[GitHubCode] Received ${res.status} from Worker.`);
}

let content = await res.text();

if (lines) {
	const [start, end] = lines;

	const contentLines = content.split("\n");

	if (contentLines.length < end - 1) {
		throw new Error(
			`[GitHubCode] End line requested is beyond content length (${contentLines.length}).`,
		);
	}

	content = contentLines.slice(start - 1, end).join("\n");
} else if (tag) {
	const contentLines = content.split("\n");

	const startTag = contentLines.findIndex((x) =>
		x.includes(`<docs-tag name="${tag}">`),
	);
	const endTag = contentLines.findIndex((x) =>
		x.includes(`</docs-tag name="${tag}">`),
	);

	if (startTag === -1 || endTag === -1) {
		throw new Error(`[GitHubCode] Unable to find a region using tag "${tag}".`);
	}

	content = contentLines.slice(startTag + 1, endTag).join("\n");
}
---

<Code code={content} lang={lang} />
